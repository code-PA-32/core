module.exports = {
  root: true,
  extends: [require.resolve("./base"), require.resolve("./testing"), "prettier"],
  plugins: ["import", "jsx-a11y", "react-hooks", "prettier", "promise"],
  overrides: [
    {
      files: ["**/*.ts?(x)"],
      parser: "@typescript-eslint/parser",
      parserOptions: {
        project: "./tsconfig.json",
        ecmaVersion: 2018,
        sourceType: "module",
        ecmaFeatures: {
          jsx: true,
        },
        warnOnUnsupportedTypeScriptVersion: true,
      },
      plugins: ["@typescript-eslint"],
      rules: {
        "default-case": "off",
        "no-dupe-class-members": "off",
        "no-undef": "off",
        "@typescript-eslint/consistent-type-assertions": "error",
        "no-array-constructor": "off",
        "@typescript-eslint/no-array-constructor": "error",
        "@typescript-eslint/no-redeclare": "error",
        "no-use-before-define": "off",
        "@typescript-eslint/no-use-before-define": [
          "error",
          {
            functions: false,
            classes: false,
            variables: false,
            typedefs: false,
          },
        ],
        "no-unused-expressions": "off",
        "@typescript-eslint/no-unused-expressions": [
          "error",
          {
            allowShortCircuit: true,
            allowTernary: true,
            allowTaggedTemplates: true,
          },
        ],
        "no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": [
          "error",
          {
            args: "none",
            ignoreRestSiblings: true,
          },
        ],
        "no-useless-constructor": "off",
        "@typescript-eslint/no-useless-constructor": "error",
        "react/no-unused-prop-types": ["off"],
        "no-redeclare": ["off"],
        "no-shadow": ["off"],
        "@typescript-eslint/no-shadow": [
          "error",
          {
            builtinGlobals: false,
            hoist: "functions",
            allow: [],
            ignoreFunctionTypeParameterNameValueShadow: true,
          },
        ],
        "@typescript-eslint/naming-convention": [
          "error",
          {
            selector: "interface",
            format: ["PascalCase"],
            custom: {
              regex: "^I[A-Z]",
              match: false,
            },
          },
          {
            selector: "typeLike",
            format: ["PascalCase"],
          },
        ],
        "@typescript-eslint/no-misused-promises": [
          "error",
          {
            checksVoidReturn: {
              arguments: false,
              attributes: false,
            },
          },
        ],
        "@typescript-eslint/await-thenable": ["error"],
        "@typescript-eslint/consistent-type-imports": [
          "error",
          { prefer: "type-imports", fixStyle: "separate-type-imports" },
        ],
        "@typescript-eslint/consistent-type-exports": [
          "error",
          { fixMixedExportsWithInlineTypeSpecifier: false },
        ],
        "@typescript-eslint/no-confusing-non-null-assertion": ["error"],
        "@typescript-eslint/no-extra-non-null-assertion": ["error"],
        "@typescript-eslint/no-floating-promises": [
          "error",
          {
            ignoreVoid: true,
          },
        ],
        "@typescript-eslint/no-for-in-array": ["error"],
        "@typescript-eslint/no-misused-new": ["error"],
        "@typescript-eslint/no-non-null-asserted-optional-chain": ["error"],
        "@typescript-eslint/prefer-ts-expect-error": ["error"],
        "@typescript-eslint/prefer-string-starts-ends-with": ["error"],
        "@typescript-eslint/switch-exhaustiveness-check": ["error"],
        "@typescript-eslint/prefer-includes": ["error"],
        "@typescript-eslint/unified-signatures": ["error"],
        "@typescript-eslint/restrict-template-expressions": [
          "error",
          { allowNumber: true, allowNullish: true, allowAny: true },
        ],
      },
    },
    {
      files: ["src/packlets/**"],
      rules: {
        "no-restricted-imports": [
          "error",
          {
            patterns: [
              "lodash/*",
              "polished/*",
              "packlets/*",
              "packlets/*/*",
              "packlets/*/*/*",
              "packlets/*/*/*/*",
              "packlets/*/*/*/*/*",
              "pages/*",
              "gql/*",
              "__generated__/*",
            ],
          },
        ],
      },
    },
    {
      files: ["./**/*.stories.tsx"],
      rules: {
        "import/no-default-export": "off",
      },
    },
    {
      files: ["**/__tests__/**/*", "**/*.{spec,test}.*", "tests/**/*"],
      rules: {
        "promise/catch-or-return": ["off"],
        "@typescript-eslint/no-unused-expressions": ["off"],
      },
    },
  ],
  rules: {
    // http://eslint.org/docs/rules/
    "array-callback-return": "error",
    "default-case": ["error", { commentPattern: "^no default$" }],
    "dot-location": ["error", "property"],
    eqeqeq: ["error", "smart"],
    "new-parens": "error",
    "no-array-constructor": "error",
    "no-caller": "error",
    "no-cond-assign": ["error", "except-parens"],
    "no-const-assign": "error",
    "no-control-regex": "error",
    "no-delete-var": "error",
    "no-dupe-args": "error",
    "no-dupe-class-members": "error",
    "no-dupe-keys": "error",
    "no-duplicate-case": "error",
    "no-empty-character-class": "error",
    "no-empty-pattern": "error",
    "no-eval": "error",
    "no-ex-assign": "error",
    "no-extend-native": "error",
    "no-extra-bind": "error",
    "no-extra-label": "error",
    "no-fallthrough": "error",
    "no-func-assign": "error",
    "no-implied-eval": "error",
    "no-invalid-regexp": "error",
    "no-iterator": "error",
    "no-label-var": "error",
    "no-labels": ["error", { allowLoop: true, allowSwitch: false }],
    "no-lone-blocks": "error",
    "no-loop-func": "error",
    "no-mixed-operators": [
      "error",
      {
        groups: [
          ["&", "|", "^", "~", "<<", ">>", ">>>"],
          ["==", "!=", "===", "!==", ">", ">=", "<", "<="],
          ["&&", "||"],
          ["in", "instanceof"],
        ],
        allowSamePrecedence: false,
      },
    ],
    "no-multi-str": "error",
    "no-native-reassign": "error",
    "no-negated-in-lhs": "error",
    "no-new-func": "error",
    "no-new-object": "error",
    "no-new-symbol": "error",
    "no-new-wrappers": "error",
    "no-obj-calls": "error",
    "no-octal": "error",
    "no-octal-escape": "error",
    "no-redeclare": "error",
    "no-regex-spaces": "error",
    "no-restricted-syntax": ["error", "WithStatement"],
    "no-script-url": "error",
    "no-self-assign": "error",
    "no-self-compare": "error",
    "no-sequences": "error",
    "no-shadow-restricted-names": "error",
    "no-sparse-arrays": "error",
    "no-template-curly-in-string": "error",
    "no-this-before-super": "error",
    "no-throw-literal": "error",
    "no-undef": "error",
    // The ESLint browser environment defines all browser globals as valid,
    // even though most people don't know some of them exist (e.g. `name` or `status`).
    // This is dangerous as it hides accidentally undefined variables.
    // We blacklist the globals that we deem potentially confusing.
    // To use them, explicitly reference them, e.g. `window.name` or `window.status`.
    "no-restricted-globals": ["error"].concat([
      "addEventListener",
      "blur",
      "close",
      "closed",
      "confirm",
      "defaultStatus",
      "defaultstatus",
      "event",
      "external",
      "find",
      "focus",
      "frameElement",
      "frames",
      "history",
      "innerHeight",
      "innerWidth",
      "length",
      "location",
      "locationbar",
      "menubar",
      "moveBy",
      "moveTo",
      "name",
      "onblur",
      "onerror",
      "onfocus",
      "onload",
      "onresize",
      "onunload",
      "open",
      "opener",
      "opera",
      "outerHeight",
      "outerWidth",
      "pageXOffset",
      "pageYOffset",
      "parent",
      "print",
      "removeEventListener",
      "resizeBy",
      "resizeTo",
      "screen",
      "screenLeft",
      "screenTop",
      "screenX",
      "screenY",
      "scroll",
      "scrollbars",
      "scrollBy",
      "scrollTo",
      "scrollX",
      "scrollY",
      "self",
      "status",
      "statusbar",
      "stop",
      "toolbar",
      "top",
    ]),
    "no-unreachable": "error",
    "no-unused-expressions": [
      "error",
      {
        allowShortCircuit: true,
        allowTernary: true,
        allowTaggedTemplates: true,
      },
    ],
    "no-unused-labels": "error",
    "no-unused-vars": [
      "error",
      {
        args: "none",
        ignoreRestSiblings: true,
      },
    ],
    "no-use-before-define": [
      "error",
      {
        functions: false,
        classes: false,
        variables: false,
      },
    ],
    "no-useless-computed-key": "error",
    "no-useless-concat": "error",
    "no-useless-constructor": "error",
    "no-useless-escape": "error",
    "no-useless-rename": [
      "error",
      {
        ignoreDestructuring: false,
        ignoreImport: false,
        ignoreExport: false,
      },
    ],
    "no-with": "error",
    "no-whitespace-before-property": "error",
    "react-hooks/exhaustive-deps": "warn",
    "require-yield": "error",
    "rest-spread-spacing": ["error", "never"],
    strict: ["error", "never"],
    "unicode-bom": ["error", "never"],
    "use-isnan": "error",
    "valid-typeof": "error",
    "no-restricted-properties": [
      "error",
      {
        object: "require",
        property: "ensure",
        message:
          "Please use import() instead. More info: https://facebook.github.io/create-react-app/docs/code-splitting",
      },
      {
        object: "System",
        property: "import",
        message:
          "Please use import() instead. More info: https://facebook.github.io/create-react-app/docs/code-splitting",
      },
    ],
    "getter-return": "error",

    // https://github.com/benmosher/eslint-plugin-import/tree/master/docs/rules
    "import/first": "error",
    "import/no-amd": "error",
    "import/no-anonymous-default-export": "error",
    "import/no-webpack-loader-syntax": "error",
    "import/no-cycle": ["error", { maxDepth: 1, ignoreExternal: false }],
    "import/no-duplicates": ["error", { "prefer-inline": false }],

    // https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules
    "react/forbid-foreign-prop-types": ["error", { allowInPropTypes: true }],
    "react/jsx-no-comment-textnodes": "error",
    "react/jsx-no-duplicate-props": "error",
    "react/jsx-no-target-blank": "error",
    "react/jsx-no-undef": "error",
    "react/jsx-pascal-case": [
      "error",
      {
        allowAllCaps: true,
        ignore: [],
      },
    ],
    "react/no-danger-with-children": "error",
    // Disabled because of undesirable warnings
    // See https://github.com/facebook/create-react-app/issues/5204 for
    // blockers until its re-enabled
    // 'react/no-deprecated': 'error',
    "react/no-direct-mutation-state": "error",
    "react/no-is-mounted": "error",
    "react/no-typos": "error",
    "react/require-render-return": "error",
    "react/style-prop-object": "error",

    // https://github.com/evcohen/eslint-plugin-jsx-a11y/tree/master/docs/rules
    "jsx-a11y/alt-text": "error",
    "jsx-a11y/anchor-has-content": "error",
    "jsx-a11y/anchor-is-valid": [
      "error",
      {
        aspects: ["noHref", "invalidHref"],
      },
    ],
    "jsx-a11y/aria-activedescendant-has-tabindex": "error",
    "jsx-a11y/aria-props": "error",
    "jsx-a11y/aria-proptypes": "error",
    "jsx-a11y/aria-role": ["error", { ignoreNonDOM: true }],
    "jsx-a11y/aria-unsupported-elements": "error",
    "jsx-a11y/heading-has-content": "error",
    "jsx-a11y/iframe-has-title": "error",
    "jsx-a11y/img-redundant-alt": "error",
    "jsx-a11y/no-access-key": "error",
    "jsx-a11y/no-distracting-elements": "error",
    "jsx-a11y/no-redundant-roles": "error",
    "jsx-a11y/role-has-required-aria-props": "error",
    "jsx-a11y/role-supports-aria-props": "error",
    "jsx-a11y/scope": "error",

    // https://github.com/facebook/react/tree/main/packages/eslint-plugin-react-hooks
    "react-hooks/rules-of-hooks": "warn",

    // Prettier
    "prettier/prettier": ["warn"],

    // Import
    "import/export": ["error"],
    "import/no-named-as-default-member": ["error"],
    "import/no-mutable-exports": ["error"],
    "import/no-absolute-path": ["error"],
    "import/no-dynamic-require": ["error"],
    "import/no-named-default": ["error"],
    "import/no-self-import": ["error"],
    "import/no-useless-path-segments": ["error", { commonjs: true }],
    "import/newline-after-import": ["error"],
    "import/named": ["off"],
    "import/no-default-export": "error",
    "import/extensions": ["error", "always", { ignorePackages: true }],

    // a11y
    "jsx-a11y/control-has-associated-label": [
      "error",
      {
        labelAttributes: ["label"],
        controlComponents: [],
        ignoreElements: ["audio", "canvas", "embed", "input", "textarea", "tr", "video"],
        ignoreRoles: [
          "grid",
          "listbox",
          "menu",
          "menubar",
          "radiogroup",
          "row",
          "tablist",
          "toolbar",
          "tree",
          "treegrid",
        ],
        depth: 5,
      },
    ],
    "jsx-a11y/click-events-have-key-events": ["warn"],
    "jsx-a11y/html-has-lang": ["error"],
    "jsx-a11y/interactive-supports-focus": ["error"],
    "jsx-a11y/lang": ["error"],
    "jsx-a11y/media-has-caption": ["error", { audio: [], video: [], track: [] }],
    "jsx-a11y/mouse-events-have-key-events": ["error"],
    "jsx-a11y/no-autofocus": ["error", { ignoreNonDOM: true }],
    "jsx-a11y/no-interactive-element-to-noninteractive-role": [
      "error",
      { tr: ["none", "presentation"] },
    ],
    "jsx-a11y/no-noninteractive-element-interactions": [
      "error",
      {
        handlers: [
          "onClick",
          "onMouseDown",
          "onMouseUp",
          "onKeyPress",
          "onKeyDown",
          "onKeyUp",
        ],
      },
    ],
    "jsx-a11y/no-static-element-interactions": [
      "warn",
      {
        handlers: [
          "onClick",
          "onMouseDown",
          "onMouseUp",
          "onKeyPress",
          "onKeyDown",
          "onKeyUp",
        ],
      },
    ],
    "jsx-a11y/tabindex-no-positive": ["error"],
    "jsx-a11y/no-noninteractive-element-to-interactive-role": [
      "error",
      {
        ul: ["listbox", "menu", "menubar", "radiogroup", "tablist", "tree", "treegrid"],
        ol: ["listbox", "menu", "menubar", "radiogroup", "tablist", "tree", "treegrid"],
        li: ["menuitem", "option", "row", "tab", "treeitem"],
        table: ["grid"],
        td: ["gridcell"],
      },
    ],
    "jsx-a11y/no-noninteractive-tabindex": ["error", { tags: [], roles: ["tabpanel"] }],

    // React
    "react/jsx-key": [
      "error",
      {
        checkFragmentShorthand: true,
        checkKeyMustBeforeSpread: true,
        warnOnDuplicates: true,
      },
    ],
    "react/jsx-boolean-value": ["error", "never", { always: [] }],
    "react/jsx-no-bind": [
      "error",
      {
        ignoreRefs: true,
        allowArrowFunctions: true,
        allowFunctions: false,
        allowBind: false,
        ignoreDOMComponents: true,
      },
    ],
    "react/no-access-state-in-setstate": ["error"],
    "react/no-danger": ["error"],
    "react/no-deprecated": ["error"],
    "react/no-find-dom-node": ["error"],
    "react/no-redundant-should-component-update": ["error"],
    "react/no-render-return-value": ["error"],
    "react/no-string-refs": ["error"],
    "react/no-this-in-sfc": ["error"],
    "react/no-unknown-property": ["error"],
    "react/no-unused-prop-types": [
      "error",
      { customValidators: [], skipShapeProps: true },
    ],
    "react/no-unused-state": ["error"],
    "react/no-will-update-set-state": ["error"],
    "react/prefer-es6-class": ["error", "always"],
    "react/self-closing-comp": ["error"],
    "react/void-dom-elements-no-children": ["error"],
    "react/jsx-curly-brace-presence": ["error", "never"],

    // ESLint
    "constructor-super": ["error"],
    "func-names": ["error"],
    "lines-between-class-members": ["error", "always", { exceptAfterSingleLine: false }],
    "no-class-assign": ["error"],
    "no-shadow": ["error"],
    "no-undef-init": ["error"],
    "no-var": ["error"],
    "object-shorthand": [
      "error",
      "always",
      { ignoreConstructors: false, avoidQuotes: true },
    ],
    "prefer-const": ["error", { destructuring: "any", ignoreReadBeforeAssign: true }],
    "prefer-numeric-literals": ["error"],
    "prefer-rest-params": ["error"],
    "prefer-spread": ["error"],
    "prefer-template": ["error"],
    "symbol-description": ["error"],
    "new-cap": [
      "error",
      {
        newIsCap: true,
        newIsCapExceptions: [],
        capIsNew: false,
        capIsNewExceptions: ["Immutable.Map", "Immutable.Set", "Immutable.List"],
        properties: true,
      },
    ],
    "no-bitwise": ["error"],
    "no-continue": ["error"],
    "no-lonely-if": ["error"],
    "no-multi-assign": ["error"],
    "no-unneeded-ternary": ["error", { defaultAssignment: false }],
    "one-var": ["error", "never"],
    "operator-assignment": ["error", "always"],
    "spaced-comment": [
      "error",
      "always",
      {
        line: { exceptions: ["-", "+"], markers: ["=", "!"] },
        block: {
          exceptions: ["-", "+"],
          markers: ["=", "!", ":", "::"],
          balanced: true,
        },
      },
    ],
    "block-scoped-var": ["error"],
    "dot-notation": ["error", { allowKeywords: true, allowPattern: "" }],
    "for-direction": ["error"],
    "guard-for-in": ["error"],
    "no-alert": ["error"],
    "no-async-promise-executor": ["error"],
    "no-await-in-loop": ["warn"],
    "no-case-declarations": ["error"],
    "no-compare-neg-zero": ["error"],
    "no-console": ["error", { allow: ["warn", "error", "info"] }],
    "no-constant-condition": ["error"],
    "no-debugger": ["error"],
    "no-else-return": ["error", { allowElseIf: false }],
    "no-empty": ["error"],
    "no-empty-function": ["error", { allow: ["arrowFunctions", "functions", "methods"] }],
    "no-extra-boolean-cast": ["error"],
    "no-global-assign": ["error", { exceptions: [] }],
    "no-inner-declarations": ["error"],
    "no-irregular-whitespace": ["error"],
    "no-misleading-character-class": ["error"],
    "no-new": ["error"],
    "no-prototype-builtins": ["error"],
    "no-return-assign": ["error", "always"],
    "no-return-await": ["error"],
    "no-unsafe-finally": ["error"],
    "no-unsafe-negation": ["error"],
    "no-useless-catch": ["error"],
    "no-useless-return": ["error"],
    "no-void": [
      "error",
      {
        allowAsStatement: true, // INJECTION!
      },
    ],
    "vars-on-top": ["error"],
    yoda: ["error"],
    // ESLint v7
    "no-dupe-else-if": ["error"],
    "no-setter-return": ["error"],
    "consistent-return": ["error", { treatUndefinedAsUnspecified: false }],

    // ESLint v8
    "no-loss-of-precision": ["error"],
    "no-nonoctal-decimal-escape": ["error"],
    "no-unsafe-optional-chaining": ["error"],
    "no-useless-backreference": ["error"],

    // promise
    "promise/always-return": "off",
    "promise/no-return-wrap": "error",
    "promise/catch-or-return": "error",
    "promise/no-promise-in-callback": "error",
    "promise/no-callback-in-promise": "error",
    "promise/avoid-new": "off",
    "promise/no-new-statics": "error",
    "promise/no-return-in-finally": "error",
    "promise/valid-params": "error",

    // some custom
    "no-restricted-imports": [
      "error",
      {
        paths: [
          {
            name: "lodash",
            importNames: ["*"],
            message: "Lodash is banned, use radash instead",
          },
        ],
        patterns: [
          "lodash/*",
          "polished/*",
          "*/*/packlets",
          "*/*/*/packlets",
          "*/*/*/*/packlets",
          "*/*/*/*/*/packlets",
          "*/*/*/*/*/*/packlets",
          "*/*/*/*/*/*/*/packlets",
          "*/*/*/*/*/*/*/*/packlets",
          "~/packlets/*/*",
          "~/packlets/*/*/*",
          "~/packlets/*/*/*/*",
          "~/packlets/*/*/*/*/*",
          "~/packlets/*/*/*/*/*/*",
        ],
      },
    ],
  },
}
